#!/usr/bin/env python3

"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∫–Ω–∏–≥
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏
"""

import os
import sys
import json
import shutil
import tarfile
from pathlib import Path
from datetime import datetime
import hashlib


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    RESET = '\033[0m'


class ProjectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–Ω–∏–≥"""
    
    def __init__(self):
        self.projects_dir = Path("projects_archive")
        self.projects_dir.mkdir(exist_ok=True)
        
        self.metadata_file = self.projects_dir / "projects.json"
        self.current_file = self.projects_dir / ".current"
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.work_dirs = [
            "extracted",
            "extracted_fixed", 
            "figures",
            "translations",
            "translations_fixed",
            "translations_formatted",
            "output",
            "context",
            "progress",
            "vectors",
            "images",
            "images_final",
            "audiobook",           # –ê—É–¥–∏–æ–∫–Ω–∏–≥–∏ v1.0
            "audio_adapted",       # –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞—É–¥–∏–æ v2.0
            "audiobook_adapted",   # –ê—É–¥–∏–æ–∫–Ω–∏–≥–∏ v2.0
            "phonetics"            # –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.work_files = [
            "book.pdf",
            "USAGE.md",
            ".env",  # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
            "phonetics.json",  # —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã
            "book_context.json"  # –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–Ω–∏–≥–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        ]
        
        self.load_metadata()
    
    def load_metadata(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if self.metadata_file.exists():
            with open(self.metadata_file, 'r', encoding='utf-8') as f:
                self.projects = json.load(f)
        else:
            self.projects = {}
    
    def save_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.projects, f, ensure_ascii=False, indent=2)
    
    def get_book_hash(self, book_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –∫–Ω–∏–≥–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not Path(book_path).exists():
            return None
        
        sha256_hash = hashlib.sha256()
        with open(book_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()[:12]
    
    def get_book_info(self, book_path="book.pdf"):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ"""
        info = {
            "filename": Path(book_path).name,
            "size": 0,
            "pages": 0,
            "title": "",
            "hash": ""
        }
        
        if Path(book_path).exists():
            info["size"] = Path(book_path).stat().st_size
            info["hash"] = self.get_book_hash(book_path)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ PDF
            try:
                import fitz
                doc = fitz.open(book_path)
                info["pages"] = len(doc)
                metadata = doc.metadata
                if metadata:
                    info["title"] = metadata.get("title", "") or Path(book_path).stem
                doc.close()
            except:
                info["title"] = Path(book_path).stem
        
        return info
    
    def archive_project(self, project_name=None, description=""):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ book.pdf
        if not Path("book.pdf").exists():
            print(f"{Colors.RED}‚ùå –§–∞–π–ª book.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.RESET}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        book_info = self.get_book_info()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not project_name:
            book_title = book_info["title"] or "book"
            # –û—á–∏—â–∞–µ–º –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            book_title = "".join(c for c in book_title if c.isalnum() or c in " -_")[:50]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            project_name = f"{book_title}_{timestamp}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        project_path = self.projects_dir / f"{project_name}.tar.gz"
        if project_path.exists():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç '{project_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!{Colors.RESET}")
            response = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ")
            if response.lower() != 'y':
                return False
        
        print(f"{Colors.CYAN}üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'...{Colors.RESET}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.collect_stats()
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        with tarfile.open(project_path, "w:gz") as tar:
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dir_name in self.work_dirs:
                if Path(dir_name).exists():
                    print(f"  üìÅ {dir_name}/")
                    tar.add(dir_name)
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for file_name in self.work_files:
                if Path(file_name).exists():
                    print(f"  üìÑ {file_name}")
                    tar.add(file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.projects[project_name] = {
            "created": datetime.now().isoformat(),
            "description": description,
            "book": book_info,
            "stats": stats,
            "archive": str(project_path.name)
        }
        self.save_metadata()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
        archive_size = project_path.stat().st_size / (1024 * 1024)  # MB
        
        print(f"{Colors.GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {project_path}{Colors.RESET}")
        print(f"   –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {archive_size:.1f} MB")
        print(f"   –ì–ª–∞–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {stats['translated_chapters']}/{stats['total_chapters']}")
        
        return True
    
    def restore_project(self, project_name):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        
        if project_name not in self.projects:
            print(f"{Colors.RED}‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.RESET}")
            self.list_projects()
            return False
        
        project_info = self.projects[project_name]
        archive_path = self.projects_dir / project_info["archive"]
        
        if not archive_path.exists():
            print(f"{Colors.RED}‚ùå –ê—Ä—Ö–∏–≤ {archive_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.RESET}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.check_workspace_dirty():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –í —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!{Colors.RESET}")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã (y/n): ")
            if response.lower() != 'y':
                return False
        
        print(f"{Colors.CYAN}üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'...{Colors.RESET}")
        
        # –û—á–∏—â–∞–µ–º —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        self.clean_workspace()
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        with tarfile.open(archive_path, "r:gz") as tar:
            tar.extractall()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
        with open(self.current_file, 'w') as f:
            f.write(project_name)
        
        print(f"{Colors.GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!{Colors.RESET}")
        self.show_project_info(project_name)
        
        return True
    
    def clean_workspace(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        print(f"{Colors.YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...{Colors.RESET}")
        
        for dir_name in self.work_dirs:
            if Path(dir_name).exists():
                shutil.rmtree(dir_name)
                print(f"  ‚ùå –£–¥–∞–ª–µ–Ω–æ: {dir_name}/")
        
        # –£–¥–∞–ª—è–µ–º book.pdf —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
        if Path("book.pdf").exists() and not Path("book.pdf").is_symlink():
            Path("book.pdf").unlink()
            print(f"  ‚ùå –£–¥–∞–ª–µ–Ω–æ: book.pdf")
    
    def check_workspace_dirty(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        for dir_name in self.work_dirs:
            if Path(dir_name).exists() and any(Path(dir_name).iterdir()):
                return True
        
        if Path("book.pdf").exists():
            return True
        
        return False
    
    def collect_stats(self):
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        stats = {
            "total_chapters": 0,
            "translated_chapters": 0,
            "figures_extracted": 0,
            "output_files": 0,
            "audio_files": 0,
            "adapted_chapters": 0,
            "adapted_audio_files": 0,
            "total_size_mb": 0
        }
        
        # –°—á–∏—Ç–∞–µ–º –≥–ª–∞–≤—ã
        extracted_dir = Path("extracted_fixed")
        if not extracted_dir.exists():
            extracted_dir = Path("extracted")
        
        if extracted_dir.exists():
            chapters = list(extracted_dir.glob("chapter_*.json"))
            stats["total_chapters"] = len(chapters)
        
        # –°—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        trans_dir = Path("translations")
        if trans_dir.exists():
            translations = list(trans_dir.glob("chapter_*_translated.json"))
            stats["translated_chapters"] = len(translations)
        
        # –°—á–∏—Ç–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        figures_dir = Path("figures")
        if figures_dir.exists():
            figures = list(figures_dir.glob("*.png"))
            stats["figures_extracted"] = len(figures)
        
        # –°—á–∏—Ç–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        output_dir = Path("output")
        if output_dir.exists():
            outputs = list(output_dir.glob("*.pdf")) + list(output_dir.glob("*.epub"))
            stats["output_files"] = len(outputs)
        
        # –°—á–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã v1.0
        audiobook_dir = Path("audiobook")
        if audiobook_dir.exists():
            audio_files = list(audiobook_dir.glob("*.mp3"))
            stats["audio_files"] = len(audio_files)
        
        # –°—á–∏—Ç–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã
        adapted_dir = Path("audio_adapted")
        if adapted_dir.exists():
            adapted = list(adapted_dir.glob("chapter_*_translated_audio.json"))
            stats["adapted_chapters"] = len(adapted)
        
        # –°—á–∏—Ç–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã v2.0
        adapted_audio_dir = Path("audiobook_adapted")
        if adapted_audio_dir.exists():
            adapted_audio = list(adapted_audio_dir.glob("*.mp3"))
            stats["adapted_audio_files"] = len(adapted_audio)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
        total_size = 0
        for dir_name in self.work_dirs:
            if Path(dir_name).exists():
                for file_path in Path(dir_name).rglob("*"):
                    if file_path.is_file():
                        total_size += file_path.stat().st_size
        
        stats["total_size_mb"] = round(total_size / (1024 * 1024), 1)
        
        return stats
    
    def list_projects(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if not self.projects:
            print(f"{Colors.YELLOW}üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤{Colors.RESET}")
            return
        
        print(f"{Colors.BOLD}{Colors.CYAN}üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:{Colors.RESET}")
        print("=" * 80)
        
        for idx, (name, info) in enumerate(self.projects.items(), 1):
            created = datetime.fromisoformat(info["created"]).strftime("%Y-%m-%d %H:%M")
            book_title = info["book"]["title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            pages = info["book"]["pages"]
            translated = info["stats"]["translated_chapters"]
            total = info["stats"]["total_chapters"]
            
            status_color = Colors.GREEN if translated == total and total > 0 else Colors.YELLOW
            status = f"{status_color}{translated}/{total}{Colors.RESET}"
            
            print(f"{idx:2}. {Colors.BOLD}{name}{Colors.RESET}")
            print(f"    üìñ {book_title} ({pages} —Å—Ç—Ä.)")
            print(f"    üìÖ {created} | üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {status}")
            
            if info.get("description"):
                print(f"    üí¨ {info['description']}")
            
            print()
    
    def show_project_info(self, project_name):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        if project_name not in self.projects:
            return
        
        info = self.projects[project_name]
        stats = info["stats"]
        book = info["book"]
        
        print(f"\n{Colors.BOLD}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:{Colors.RESET}")
        print(f"  üìñ –ö–Ω–∏–≥–∞: {book['title']} ({book['pages']} —Å—Ç—Ä.)")
        print(f"  üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≥–ª–∞–≤: {stats['translated_chapters']}/{stats['total_chapters']}")
        print(f"  üñºÔ∏è  –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º: {stats['figures_extracted']}")
        print(f"  üìÑ –í—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['output_files']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ v1.0
        if stats.get('audio_files', 0) > 0:
            print(f"  üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {stats['audio_files']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ v2.0
        if stats.get('adapted_chapters', 0) > 0:
            print(f"  üìù –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞—É–¥–∏–æ: {stats['adapted_chapters']} –≥–ª–∞–≤")
        
        if stats.get('adapted_audio_files', 0) > 0:
            print(f"  üéôÔ∏è  –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ: {stats['adapted_audio_files']}")
        
        print(f"  üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {stats['total_size_mb']} MB")
    
    def switch_project(self, project_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if self.check_workspace_dirty():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è{Colors.RESET}")
            response = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç? (y/n): ")
            if response.lower() == 'y':
                current_name = input("–ò–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ): ").strip()
                self.archive_project(current_name or None)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        return self.restore_project(project_name)
    
    def get_current_project(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        if self.current_file.exists():
            with open(self.current_file, 'r') as f:
                return f.read().strip()
        return None


def main():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    manager = ProjectManager()
    
    if len(sys.argv) < 2:
        print(f"{Colors.BOLD}üóÇÔ∏è  –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∫–Ω–∏–≥{Colors.RESET}")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python project_manager.py save [name] [description]  - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç")
        print("  python project_manager.py load <name>                - –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
        print("  python project_manager.py list                       - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("  python project_manager.py switch <name>              - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
        print("  python project_manager.py clean                      - –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ")
        print("  python project_manager.py current                    - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç")
        return
    
    command = sys.argv[1]
    
    if command == "save":
        name = sys.argv[2] if len(sys.argv) > 2 else None
        description = " ".join(sys.argv[3:]) if len(sys.argv) > 3 else ""
        manager.archive_project(name, description)
    
    elif command == "load" or command == "restore":
        if len(sys.argv) < 3:
            print(f"{Colors.RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞{Colors.RESET}")
            manager.list_projects()
        else:
            manager.restore_project(sys.argv[2])
    
    elif command == "list":
        manager.list_projects()
    
    elif command == "switch":
        if len(sys.argv) < 3:
            print(f"{Colors.RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞{Colors.RESET}")
            manager.list_projects()
        else:
            manager.switch_project(sys.argv[2])
    
    elif command == "clean":
        if manager.check_workspace_dirty():
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –í —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ!{Colors.RESET}")
            response = input("–¢–æ—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë? (yes/no): ")
            if response.lower() == 'yes':
                manager.clean_workspace()
                print(f"{Colors.GREEN}‚úÖ –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–æ{Colors.RESET}")
        else:
            print(f"{Colors.GREEN}‚úÖ –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É–∂–µ —á–∏—Å—Ç–æ–µ{Colors.RESET}")
    
    elif command == "current":
        current = manager.get_current_project()
        if current:
            print(f"{Colors.CYAN}üìç –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {Colors.BOLD}{current}{Colors.RESET}")
            manager.show_project_info(current)
        else:
            print(f"{Colors.YELLOW}üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞{Colors.RESET}")
    
    else:
        print(f"{Colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}{Colors.RESET}")


if __name__ == "__main__":
    main()