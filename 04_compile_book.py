#!/usr/bin/env python3

import json
import os
from pathlib import Path
from datetime import datetime
from lxml import etree
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm, cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image as RLImage, KeepTogether
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PIL import Image
import base64


class FinalCompilerWithFigures:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏"""
    
    def __init__(self, translations_dir="translations", figures_dir="figures", use_filtered=False):
        # –ï—Å–ª–∏ use_filtered=True, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        if use_filtered and Path("translations_filtered").exists():
            self.translations_dir = Path("translations_filtered")
            print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ translations_filtered")
        else:
            self.translations_dir = Path(translations_dir)
        
        self.figures_dir = Path(figures_dir)
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º
        self.figures_metadata = self._load_figures_metadata()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
        self._register_fonts()
    
    def _load_figures_metadata(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º"""
        metadata_file = self.figures_dir / "figures_metadata.json"
        if metadata_file.exists():
            with open(metadata_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"figures": []}
    
    def _register_fonts(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        try:
            font_paths = [
                "/Library/Fonts/Arial Unicode.ttf",
                "/System/Library/Fonts/Supplemental/Arial.ttf",
            ]
            
            for font_path in font_paths:
                if os.path.exists(font_path):
                    try:
                        font_name = Path(font_path).stem
                        pdfmetrics.registerFont(TTFont(font_name, font_path))
                        self.font_name = font_name
                        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: {font_name}")
                        break
                    except:
                        continue
            else:
                self.font_name = 'Helvetica'
        except:
            self.font_name = 'Helvetica'
    
    def compile_pdf_with_figures(self, book_title="CMMI –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ v1.3", author="SEI"):
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç PDF —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏"""
        
        output_file = self.output_dir / f"{book_title} (–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è).pdf"
        
        doc = SimpleDocTemplate(
            str(output_file),
            pagesize=A4,
            rightMargin=20*mm,
            leftMargin=20*mm,
            topMargin=20*mm,
            bottomMargin=20*mm
        )
        
        story = []
        styles = self._get_styles()
        
        # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        story.append(Paragraph(book_title, styles['CustomTitle']))
        story.append(Spacer(1, 12))
        story.append(Paragraph(author, styles['CustomAuthor']))
        story.append(PageBreak())
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–∞–≥—Ä–∞–º–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        figures_by_page = {}
        for fig in self.figures_metadata.get("figures", []):
            page = fig["page"]
            if page not in figures_by_page:
                figures_by_page[page] = []
            figures_by_page[page].append(fig)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã (–≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ–π –∫–Ω–∏–≥–∏)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–∏–ø–∞ –∏ ID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        inserted_figures_global = set()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤—ã
        chapters = sorted(self.translations_dir.glob("chapter_*_translated.json"))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        extracted_metadata_file = self.output_dir.parent / "extracted_fixed" / "metadata.json"
        page_mapping = {}
        if extracted_metadata_file.exists():
            with open(extracted_metadata_file, 'r', encoding='utf-8') as f:
                extracted_meta = json.load(f)
                for chapter_info in extracted_meta.get("chapters", []):
                    chapter_num = chapter_info["number"]
                    page_mapping[chapter_num] = {
                        "start": chapter_info.get("start_page", 0),
                        "end": chapter_info.get("end_page", 0)
                    }
        
        for chapter_file in chapters:
            with open(chapter_file, 'r', encoding='utf-8') as f:
                chapter_data = json.load(f)
            
            chapter_num = chapter_data.get("number", 0)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
            chapter_title = chapter_data.get("title", f"–ì–ª–∞–≤–∞ {chapter_num}")
            story.append(Paragraph(chapter_title, styles['CustomHeading']))
            story.append(Spacer(1, 12))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ç–æ–π –≥–ª–∞–≤—ã
            if chapter_num in page_mapping:
                start_page = page_mapping[chapter_num]["start"]
                end_page = page_mapping[chapter_num]["end"]
            else:
                # Fallback: –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã
                start_page = chapter_num * 3
                end_page = start_page + 3
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            chapter_figures = []
            for page in range(max(0, start_page - 3), end_page + 5):
                if page in figures_by_page:
                    for fig in figures_by_page[page]:
                        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–ª–∏ —ç—Ç—É –¥–∏–∞–≥—Ä–∞–º–º—É
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–∏–ø–∞ –∏ ID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                        fig_key = f"{fig['type']}_{fig['id']}"
                        if fig_key not in inserted_figures_global:
                            chapter_figures.append(fig)
                            inserted_figures_global.add(fig_key)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –Ω–∞—á–∞–ª–æ –≥–ª–∞–≤—ã
            for fig in chapter_figures:
                figure_element = self._create_figure_element(fig, styles)
                if figure_element:
                    story.append(Spacer(1, 12))
                    story.append(figure_element)
                    story.append(Spacer(1, 12))
                    print(f"  üìä –í—Å—Ç–∞–≤–ª–µ–Ω–∞ {fig['type']} {fig['id']} –≤ –≥–ª–∞–≤—É {chapter_num} (—Å—Ç—Ä. {fig['page']+1})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≥–ª–∞–≤—ã
            for paragraph in chapter_data.get("paragraphs", []):
                if not paragraph:
                    story.append(Spacer(1, 12))
                    continue
                
                try:
                    safe_paragraph = self._escape_xml(paragraph)
                    story.append(Paragraph(safe_paragraph, styles['CustomNormal']))
                    story.append(Spacer(1, 6))
                except:
                    continue
            
            story.append(PageBreak())
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.build(story)
        print(f"‚úÖ PDF —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {output_file}")
        return output_file
    
    def _create_figure_element(self, figure_info, styles):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è PDF"""
        
        figure_path = self.figures_dir / figure_info["filename"]
        
        if not figure_path.exists():
            return None
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(figure_path)
            width, height = img.size
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è PDF
            max_width = 450
            max_height = 600
            
            scale = min(max_width/width, max_height/height, 1.0)
            
            elements = []
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            rl_image = RLImage(str(figure_path), 
                             width=width*scale, 
                             height=height*scale)
            elements.append(rl_image)
            
            # –ü–æ–¥–ø–∏—Å—å –∫ –¥–∏–∞–≥—Ä–∞–º–º–µ
            caption = figure_info.get("caption", "")
            if not caption and figure_info.get("id"):
                caption = f"{figure_info['type'].capitalize()} {figure_info['id']}"
            
            if caption:
                elements.append(Spacer(1, 6))
                elements.append(Paragraph(f"<i>{caption}</i>", styles['Caption']))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ–¥–∏–Ω—ã–π –±–ª–æ–∫
            return KeepTogether(elements)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É {figure_info['filename']}: {e}")
            return None
    
    def _get_styles(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è PDF"""
        styles = getSampleStyleSheet()
        
        styles.add(ParagraphStyle(
            name='CustomNormal',
            fontName=self.font_name,
            fontSize=11,
            leading=16,
            spaceBefore=6,
            spaceAfter=6,
            firstLineIndent=15,
            alignment=TA_JUSTIFY
        ))
        
        styles.add(ParagraphStyle(
            name='CustomHeading',
            fontName=self.font_name,
            fontSize=14,
            leading=18,
            spaceBefore=12,
            spaceAfter=8,
            alignment=TA_CENTER
        ))
        
        styles.add(ParagraphStyle(
            name='CustomTitle',
            fontName=self.font_name,
            fontSize=18,
            leading=22,
            alignment=TA_CENTER,
            spaceAfter=20
        ))
        
        styles.add(ParagraphStyle(
            name='CustomAuthor',
            fontName=self.font_name,
            fontSize=14,
            alignment=TA_CENTER,
            spaceAfter=20
        ))
        
        styles.add(ParagraphStyle(
            name='Caption',
            fontName=self.font_name,
            fontSize=10,
            alignment=TA_CENTER,
            textColor='#555555',
            spaceBefore=3,
            spaceAfter=3
        ))
        
        return styles
    
    def _escape_xml(self, text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è XML"""
        if not text:
            return ""
        
        text = str(text)
        text = text.replace('&', '&amp;')
        text = text.replace('<', '&lt;')
        text = text.replace('>', '&gt;')
        text = text.replace('"', '&quot;')
        text = text.replace("'", '&apos;')
        
        import re
        text = re.sub(r'[\x00-\x08\x0B-\x0C\x0E-\x1F\x7F]', '', text)
        
        return text


if __name__ == "__main__":
    import sys
    import argparse
    
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏')
    parser.add_argument('--use-filtered', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ translations_filtered')
    parser.add_argument('--translations-dir', default='translations',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: translations)')
    
    args = parser.parse_args()
    
    print("üìö –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏...")
    print("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if args.use_filtered or Path("translations_filtered").exists():
        if Path("translations_filtered").exists():
            print("üìã –ù–∞–π–¥–µ–Ω—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã")
            use_filtered_choice = args.use_filtered
            if not args.use_filtered:
                response = input("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö? (y/n) [y]: ").strip().lower()
                use_filtered_choice = response != 'n'
        else:
            use_filtered_choice = False
            print("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è translations_filtered –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        use_filtered_choice = False
    
    compiler = FinalCompilerWithFigures(
        translations_dir=args.translations_dir,
        use_filtered=use_filtered_choice
    )
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º PDF
    pdf_file = compiler.compile_pdf_with_figures(
        book_title="CMMI –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ v1.3",
        author="Software Engineering Institute"
    )
    
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
    print(f"üìñ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞: {pdf_file}")
    print("\n–ö–Ω–∏–≥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("  ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    if use_filtered_choice:
        print("  ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–±–µ–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞)")
    print("  ‚Ä¢ –í—Å–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã (Figure, Table)")
    print("  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")