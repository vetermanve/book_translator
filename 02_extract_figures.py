#!/usr/bin/env python3

import fitz
import json
import re
from pathlib import Path
from tqdm import tqdm


class VectorFigureExtractor:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–∑ PDF –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    def __init__(self, pdf_path, output_dir="figures"):
        self.pdf_path = pdf_path
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
    def extract_all_figures(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏"""
        
        print("üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º...")
        doc = fitz.open(self.pdf_path)
        
        figures = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –∫ —Ä–∏—Å—É–Ω–∫–∞–º
        figure_patterns = [
            (r"Figure\s+(\d+\.\d+)", "figure"),
            (r"Table\s+(\d+\.\d+)", "table"),
        ]
        
        print("üîç –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏...")
        
        for page_num in tqdm(range(len(doc)), desc="–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü"):
            page = doc[page_num]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            drawings = page.get_drawings()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–∞
            if len(drawings) > 10:  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
                
                # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ä–∏—Å—É–Ω–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                text = page.get_text()
                caption = None
                figure_id = None
                figure_type = "diagram"
                
                for pattern, ftype in figure_patterns:
                    matches = re.finditer(pattern, text, re.IGNORECASE)
                    for match in matches:
                        figure_id = match.group(1)
                        figure_type = ftype
                        
                        # –ò—â–µ–º –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å—å
                        lines = text.split('\n')
                        for i, line in enumerate(lines):
                            if match.group() in line:
                                # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–ª–µ–¥—É—é—â—É—é –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
                                caption = line.strip()
                                if i + 1 < len(lines) and not re.match(r'^(Figure|Table)', lines[i + 1]):
                                    next_line = lines[i + 1].strip()
                                    if next_line and len(next_line) < 100:
                                        caption = f"{caption} {next_line}"
                                break
                        break
                
                if figure_id:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å –¥–∏–∞–≥—Ä–∞–º–º–æ–π
                    figure_info = self._extract_figure_region(page, page_num, figure_id, figure_type, caption)
                    if figure_info:
                        figures.append(figure_info)
                        print(f"  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ {figure_type} {figure_id}: {caption[:50] if caption else ''}")
        
        doc.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "total_figures": len(figures),
            "figures": figures
        }
        
        metadata_file = self.output_dir / "figures_metadata.json"
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚ú® –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(figures)} –¥–∏–∞–≥—Ä–∞–º–º")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {self.output_dir}/")
        
        return figures
    
    def _extract_figure_region(self, page, page_num, figure_id, figure_type, caption):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–∏–∞–≥—Ä–∞–º–º–æ–π"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        drawings = page.get_drawings()
        
        if not drawings:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        min_x, min_y = float('inf'), float('inf')
        max_x, max_y = float('-inf'), float('-inf')
        
        for drawing in drawings:
            rect = drawing.get('rect', None)
            if rect:
                min_x = min(min_x, rect.x0)
                min_y = min(min_y, rect.y0)
                max_x = max(max_x, rect.x1)
                max_y = max(max_y, rect.y1)
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º —ç—Ç—É –æ–±–ª–∞—Å—Ç—å
        if min_x < float('inf'):
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
            padding = 20
            clip_rect = fitz.Rect(
                max(0, min_x - padding),
                max(0, min_y - padding),
                min(page.rect.width, max_x + padding),
                min(page.rect.height, max_y + padding)
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            mat = fitz.Matrix(2, 2)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            pix = page.get_pixmap(matrix=mat, clip=clip_rect, alpha=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = f"{figure_type}_{figure_id.replace('.', '_')}_p{page_num:03d}.png"
            filepath = self.output_dir / filename
            pix.save(str(filepath))
            
            return {
                "id": figure_id,
                "type": figure_type,
                "page": page_num,
                "caption": caption,
                "filename": filename,
                "width": pix.width,
                "height": pix.height,
                "vector_count": len(drawings)
            }
        
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        mat = fitz.Matrix(2, 2)
        pix = page.get_pixmap(matrix=mat, alpha=False)
        
        filename = f"{figure_type}_{figure_id.replace('.', '_')}_p{page_num:03d}_full.png"
        filepath = self.output_dir / filename
        pix.save(str(filepath))
        
        return {
            "id": figure_id,
            "type": figure_type,
            "page": page_num,
            "caption": caption,
            "filename": filename,
            "width": pix.width,
            "height": pix.height,
            "vector_count": len(drawings),
            "full_page": True
        }
    
    def extract_specific_pages_with_many_vectors(self, min_vectors=30):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        
        print(f"üìñ –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å {min_vectors}+ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏...")
        doc = fitz.open(self.pdf_path)
        
        complex_pages = []
        
        for page_num in tqdm(range(len(doc)), desc="–ê–Ω–∞–ª–∏–∑"):
            page = doc[page_num]
            drawings = page.get_drawings()
            
            if len(drawings) >= min_vectors:
                print(f"  üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {len(drawings)} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                mat = fitz.Matrix(2, 2)
                pix = page.get_pixmap(matrix=mat, alpha=False)
                
                filename = f"complex_diagram_p{page_num:03d}.png"
                filepath = self.output_dir / filename
                pix.save(str(filepath))
                
                complex_pages.append({
                    "page": page_num,
                    "vector_count": len(drawings),
                    "filename": filename
                })
        
        doc.close()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(complex_pages)} —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º")
        return complex_pages


if __name__ == "__main__":
    extractor = VectorFigureExtractor("book.pdf")
    
    print("=" * 60)
    print("–ò–ó–í–õ–ï–ß–ï–ù–ò–ï –í–ï–ö–¢–û–†–ù–´–• –î–ò–ê–ì–†–ê–ú–ú")
    print("=" * 60)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã —Å –ø–æ–¥–ø–∏—Å—è–º–∏
    figures = extractor.extract_all_figures()
    
    print("\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã:")
    for fig in figures[:10]:
        print(f"  {fig['type'].capitalize()} {fig['id']}: {fig['caption'][:60] if fig['caption'] else '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}")
        print(f"    ‚îî‚îÄ –§–∞–π–ª: {fig['filename']} ({fig['vector_count']} –≤–µ–∫—Ç–æ—Ä–æ–≤)")
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
    print("\n" + "=" * 60)
    print("–ü–û–ò–°–ö –°–õ–û–ñ–ù–´–• –î–ò–ê–ì–†–ê–ú–ú")
    print("=" * 60)
    complex_pages = extractor.extract_specific_pages_with_many_vectors(min_vectors=50)
    
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –í—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ figures/")