#!/usr/bin/env python3
"""
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –∂–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import json
import os
import sys
import time
import threading
import queue
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import re
from dataclasses import dataclass
from enum import Enum

from deepseek_translator import DeepSeekTranslator
from translation_manager import TranslationProgress, ContextManager

# ANSI –∫–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
class Terminal:
    CLEAR = '\033[2J'
    HOME = '\033[H'
    HIDE_CURSOR = '\033[?25l'
    SHOW_CURSOR = '\033[?25h'
    SAVE_CURSOR = '\033[s'
    RESTORE_CURSOR = '\033[u'
    
    @staticmethod
    def move_to(row, col):
        return f'\033[{row};{col}H'
    
    @staticmethod
    def clear_line():
        return '\033[K'
    
    @staticmethod
    def clear_below():
        return '\033[J'

# –¶–≤–µ—Ç–∞
class Colors:
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    BRIGHT_BLACK = '\033[90m'
    BRIGHT_RED = '\033[91m'
    BRIGHT_GREEN = '\033[92m'
    BRIGHT_YELLOW = '\033[93m'
    BRIGHT_BLUE = '\033[94m'
    BRIGHT_MAGENTA = '\033[95m'
    BRIGHT_CYAN = '\033[96m'
    BRIGHT_WHITE = '\033[97m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    RESET = '\033[0m'
    BG_BLACK = '\033[40m'
    BG_BLUE = '\033[44m'
    BG_GREEN = '\033[42m'
    BG_YELLOW = '\033[43m'
    BG_RED = '\033[41m'

class WorkerStatus(Enum):
    IDLE = "‚ö™ –û–∂–∏–¥–∞–Ω–∏–µ"
    PREPARING = "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
    SENDING = "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞"
    WAITING = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ API"
    PROCESSING = "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞"
    COMPLETED = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    ERROR = "‚ùå –û—à–∏–±–∫–∞"

@dataclass
class WorkerState:
    id: int
    status: WorkerStatus
    current_chapter: Optional[int] = None
    current_block: Optional[int] = None
    total_blocks: int = 0
    chars_sent: int = 0
    chars_received: int = 0
    api_time: float = 0
    error_msg: str = ""
    progress: float = 0
    last_update: datetime = None

@dataclass
class TranslationTask:
    chapter_num: int
    chapter_data: Dict
    context: Dict
    block_idx: int
    block_data: Dict
    total_blocks: int

class ParallelTranslator:
    def __init__(self, max_workers=25):
        self.max_workers = max_workers
        self.progress_tracker = TranslationProgress()
        self.context_manager = ContextManager()
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Ç—Ä–∞–Ω—Å–ª–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self.translators = [DeepSeekTranslator() for _ in range(max_workers)]
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
        self.workers = {i: WorkerState(id=i, status=WorkerStatus.IDLE) 
                       for i in range(max_workers)}
        
        # –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        self.task_queue = queue.Queue()
        self.result_queue = queue.Queue()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.screen_lock = threading.Lock()
        self.stats_lock = threading.Lock()
        
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.global_stats = {
            "total_chapters": 0,
            "completed_chapters": 0,
            "total_blocks": 0,
            "completed_blocks": 0,
            "chars_sent": 0,
            "chars_received": 0,
            "api_calls": 0,
            "api_errors": 0,
            "start_time": None,
            "estimated_cost": 0.0,
            "active_workers": 0
        }
        
        # –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.stop_flag = threading.Event()
        self.pause_flag = threading.Event()
        
        # –†–∞–∑–º–µ—Ä—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        try:
            self.term_width = os.get_terminal_size().columns
            self.term_height = os.get_terminal_size().lines
        except:
            self.term_width = 80
            self.term_height = 24
        
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—á–∞–ª–æ"""
        print(Terminal.CLEAR + Terminal.HOME, end='', flush=True)
        
    def draw_header(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header = f"{'='*self.term_width}"[:self.term_width]
        title = " üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î–ß–ò–ö DEEPSEEK (25 –ü–û–¢–û–ö–û–í) "
        padding = (self.term_width - len(title)) // 2
        
        print(Terminal.move_to(1, 1) + Colors.BRIGHT_CYAN + Colors.BOLD + header + Colors.RESET)
        print(Terminal.move_to(2, padding) + Colors.BRIGHT_CYAN + Colors.BOLD + title + Colors.RESET)
        print(Terminal.move_to(3, 1) + Colors.BRIGHT_CYAN + Colors.BOLD + header + Colors.RESET)
        
    def draw_global_stats(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        row = 5
        
        if not self.global_stats["start_time"]:
            elapsed = "00:00:00"
            speed = 0
        else:
            elapsed_delta = datetime.now() - self.global_stats["start_time"]
            elapsed = str(elapsed_delta).split('.')[0]
            speed = self.global_stats["chars_sent"] / max(1, elapsed_delta.total_seconds())
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_pct = self.global_stats["completed_blocks"] / max(1, self.global_stats["total_blocks"]) * 100
        progress_bar_width = 40
        filled = int(progress_bar_width * progress_pct / 100)
        progress_bar = '‚ñà' * filled + '‚ñë' * (progress_bar_width - filled)
        
        stats_text = [
            f"{Colors.BOLD}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê{Colors.RESET}",
            "",
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {Colors.GREEN}|{progress_bar}|{Colors.RESET} {progress_pct:.1f}%",
            f"–ì–ª–∞–≤—ã: {Colors.BRIGHT_YELLOW}{self.global_stats['completed_chapters']}/{self.global_stats['total_chapters']}{Colors.RESET} ‚Ä¢ "
            f"–ë–ª–æ–∫–∏: {Colors.BRIGHT_YELLOW}{self.global_stats['completed_blocks']}/{self.global_stats['total_blocks']}{Colors.RESET}",
            f"–í—Ä–µ–º—è: {Colors.BRIGHT_CYAN}{elapsed}{Colors.RESET} ‚Ä¢ "
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {Colors.BRIGHT_CYAN}{speed:.0f}{Colors.RESET} —Å–∏–º–≤/—Å–µ–∫",
            f"API: {Colors.BRIGHT_GREEN}{self.global_stats['api_calls']}{Colors.RESET} –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Ä¢ "
            f"–û—à–∏–±–∫–∏: {Colors.BRIGHT_RED}{self.global_stats['api_errors']}{Colors.RESET}",
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Colors.BRIGHT_BLUE}{self.global_stats['chars_sent']:,}{Colors.RESET} ‚Ä¢ "
            f"–ü–æ–ª—É—á–µ–Ω–æ: {Colors.BRIGHT_BLUE}{self.global_stats['chars_received']:,}{Colors.RESET}",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {Colors.BRIGHT_MAGENTA}${self.global_stats['estimated_cost']:.4f}{Colors.RESET} ‚Ä¢ "
            f"–ê–∫—Ç–∏–≤–Ω–æ: {Colors.BRIGHT_GREEN}{self.global_stats['active_workers']}/{self.max_workers}{Colors.RESET} –ø–æ—Ç–æ–∫–æ–≤"
        ]
        
        for i, line in enumerate(stats_text):
            print(Terminal.move_to(row + i, 3) + Terminal.clear_line() + line)
        
    def draw_worker_status(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        start_row = 15
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
        if self.max_workers <= 10:
            cols = 2
            rows_per_col = 5
        elif self.max_workers <= 15:
            cols = 3
            rows_per_col = 5
        elif self.max_workers <= 20:
            cols = 4
            rows_per_col = 5
        else:  # 21-30 –≤–æ—Ä–∫–µ—Ä–æ–≤
            cols = 5
            rows_per_col = 6
        
        cols_width = self.term_width // cols
        
        print(Terminal.move_to(start_row - 1, 3) + Colors.BOLD + f"üîß –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–¢–û–ö–û–í ({self.max_workers}):" + Colors.RESET)
        
        for worker_id, state in self.workers.items():
            col_idx = worker_id // rows_per_col
            row_idx = worker_id % rows_per_col
            
            row = start_row + row_idx * 2
            col = 3 + col_idx * cols_width
            
            # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if state.status == WorkerStatus.IDLE:
                color = Colors.BRIGHT_BLACK
            elif state.status == WorkerStatus.ERROR:
                color = Colors.BRIGHT_RED
            elif state.status == WorkerStatus.COMPLETED:
                color = Colors.BRIGHT_GREEN
            elif state.status in [WorkerStatus.SENDING, WorkerStatus.WAITING]:
                color = Colors.BRIGHT_YELLOW
            else:
                color = Colors.BRIGHT_CYAN
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Ä–∫–µ—Ä–∞
            if state.total_blocks > 0:
                progress = f"{state.current_block}/{state.total_blocks}"
            else:
                progress = "-/-"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Ä–∫–µ—Ä–µ
            if state.current_chapter is not None:
                chapter_info = f"–ì–ª.{state.current_chapter:03d}"
            else:
                chapter_info = "---"
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
            if self.max_workers > 15:
                status_line = f"{color}[{worker_id:02d}]{state.status.value[:8]:<8} {chapter_info}{Colors.RESET}"
            else:
                status_line = f"{color}[{worker_id:02d}] {state.status.value:<15} {chapter_info} {progress:>7}{Colors.RESET}"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if state.api_time > 0:
                extra = f" {Colors.DIM}({state.api_time:.1f}—Å){Colors.RESET}"
            elif state.error_msg:
                extra = f" {Colors.RED}{state.error_msg[:20]}{Colors.RESET}"
            else:
                extra = ""
            
            print(Terminal.move_to(row, col) + Terminal.clear_line() + status_line + extra)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            if state.status not in [WorkerStatus.IDLE, WorkerStatus.ERROR]:
                bar_width = 20
                filled = int(bar_width * state.progress / 100)
                bar = '‚ñ∞' * filled + '‚ñ±' * (bar_width - filled)
                print(Terminal.move_to(row + 1, col + 5) + Colors.DIM + bar + Colors.RESET)
    
    def draw_log(self, messages: List[str]):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–≥–∞"""
        start_row = 26
        max_messages = self.term_height - start_row - 2
        
        print(Terminal.move_to(start_row, 3) + Colors.BOLD + "üìú –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø:" + Colors.RESET)
        
        for i, msg in enumerate(messages[-max_messages:]):
            print(Terminal.move_to(start_row + 1 + i, 3) + Terminal.clear_line() + Colors.DIM + msg[:self.term_width-6] + Colors.RESET)
    
    def draw_footer(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–≤–∞–ª–∞"""
        footer_row = self.term_height - 1
        footer = f" [Ctrl+C] –ü–∞—É–∑–∞ ‚Ä¢ [Ctrl+D] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ä¢ –û—á–µ—Ä–µ–¥—å: {self.task_queue.qsize()} "
        padding = (self.term_width - len(footer)) // 2
        
        print(Terminal.move_to(footer_row, padding) + Colors.BG_BLUE + Colors.WHITE + footer + Colors.RESET, end='', flush=True)
    
    def update_screen(self, log_messages):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        with self.screen_lock:
            self.draw_header()
            self.draw_global_stats()
            self.draw_worker_status()
            self.draw_log(log_messages)
            self.draw_footer()
    
    def worker_thread(self, worker_id: int):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
        translator = self.translators[worker_id]
        log_messages = []
        
        while not self.stop_flag.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = self.task_queue.get(timeout=1)
                
                if task is None:  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.workers[worker_id].status = WorkerStatus.PREPARING
                self.workers[worker_id].current_chapter = task.chapter_num
                self.workers[worker_id].current_block = task.block_idx
                self.workers[worker_id].total_blocks = task.total_blocks
                self.workers[worker_id].progress = 0
                
                with self.stats_lock:
                    self.global_stats["active_workers"] += 1
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                paragraph_group = task.block_data
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                if not paragraph_group["text"].strip():
                    result = {"paragraphs": paragraph_group["paragraphs"], "skipped": True}
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                    text_paragraphs = [p for p in paragraph_group["paragraphs"] if not p.startswith("[IMAGE_")]
                    text_to_translate = "\n\n".join(text_paragraphs)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.workers[worker_id].status = WorkerStatus.SENDING
                    self.workers[worker_id].chars_sent = len(text_to_translate)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    start_time = time.time()
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
                        system_prompt = translator._create_system_prompt(task.context)
                        text_with_placeholders = translator._preserve_placeholders(text_to_translate)
                        
                        self.workers[worker_id].status = WorkerStatus.WAITING
                        
                        # API –∑–∞–ø—Ä–æ—Å
                        response = translator.client.chat.completions.create(
                            model="deepseek-chat",
                            messages=[
                                {"role": "system", "content": system_prompt},
                                {"role": "user", "content": f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. 
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã [IMAGE_XXX] –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –¥–ª—è IT –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
3. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ \\n\\n)
4. –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ä–æ—Å—Å–∏–π—Å–∫—É—é IT-–∏–Ω–¥—É—Å—Ç—Ä–∏—é

–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
{text_with_placeholders}"""}
                            ],
                            temperature=0.3,
                            max_tokens=3000
                        )
                        
                        api_time = time.time() - start_time
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                        self.workers[worker_id].status = WorkerStatus.PROCESSING
                        self.workers[worker_id].api_time = api_time
                        
                        translated = response.choices[0].message.content
                        translated = translator._restore_placeholders(translated)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        self.workers[worker_id].chars_received = len(translated)
                        
                        with self.stats_lock:
                            self.global_stats["api_calls"] += 1
                            self.global_stats["chars_sent"] += len(text_to_translate)
                            self.global_stats["chars_received"] += len(translated)
                            
                            # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                            input_tokens = len(text_to_translate) / 4
                            output_tokens = len(translated) / 4
                            cost = (input_tokens * 0.14 + output_tokens * 0.28) / 1_000_000
                            self.global_stats["estimated_cost"] += cost
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                        translated_parts = translated.split('\n\n')
                        result_paragraphs = []
                        text_idx = 0
                        
                        for original in paragraph_group["paragraphs"]:
                            if original.startswith("[IMAGE_"):
                                result_paragraphs.append(original)
                            else:
                                if text_idx < len(translated_parts):
                                    result_paragraphs.append(translated_parts[text_idx])
                                    text_idx += 1
                                else:
                                    result_paragraphs.append(translator._fallback_translate(original))
                        
                        result = {"paragraphs": result_paragraphs, "success": True}
                        
                        # –õ–æ–≥
                        log_msg = f"[{worker_id:02d}] –ì–ª.{task.chapter_num} –ë–ª.{task.block_idx}/{task.total_blocks} - {api_time:.1f}—Å"
                        log_messages.append(f"{datetime.now().strftime('%H:%M:%S')} {log_msg}")
                        
                    except Exception as e:
                        self.workers[worker_id].status = WorkerStatus.ERROR
                        self.workers[worker_id].error_msg = str(e)[:30]
                        
                        with self.stats_lock:
                            self.global_stats["api_errors"] += 1
                        
                        # –ó–∞–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
                        result_paragraphs = []
                        for p in paragraph_group["paragraphs"]:
                            if p.startswith("[IMAGE_"):
                                result_paragraphs.append(p)
                            else:
                                result_paragraphs.append(translator._fallback_translate(p))
                        
                        result = {"paragraphs": result_paragraphs, "error": str(e)}
                        
                        log_msg = f"[{worker_id:02d}] –û—à–∏–±–∫–∞: {str(e)[:50]}"
                        log_messages.append(f"{datetime.now().strftime('%H:%M:%S')} {log_msg}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.result_queue.put((task, result))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.workers[worker_id].status = WorkerStatus.COMPLETED
                self.workers[worker_id].progress = 100
                
                with self.stats_lock:
                    self.global_stats["completed_blocks"] += 1
                    self.global_stats["active_workers"] -= 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(0.1)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                self.workers[worker_id].status = WorkerStatus.IDLE
                self.workers[worker_id].current_chapter = None
                self.workers[worker_id].current_block = None
                
            except queue.Empty:
                continue
            except Exception as e:
                log_messages.append(f"[{worker_id:02d}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def screen_updater_thread(self, log_messages):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
        while not self.stop_flag.is_set():
            self.update_screen(log_messages)
            time.sleep(0.1)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    
    def translate_chapters(self, chapters: List[Dict]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.global_stats["total_chapters"] = len(chapters)
        self.global_stats["start_time"] = datetime.now()
        log_messages = []
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á
        all_tasks = []
        
        for chapter_info in chapters:
            chapter_num = chapter_info['number']
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ
            if self.progress_tracker.is_chapter_translated(chapter_num):
                self.global_stats["completed_chapters"] += 1
                log_messages.append(f"–ì–ª–∞–≤–∞ {chapter_num} —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞")
                continue
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—É
            chapter_file = Path(f"extracted_fixed/chapter_{chapter_num:03d}.json")
            if not chapter_file.exists():
                log_messages.append(f"–§–∞–π–ª –≥–ª–∞–≤—ã {chapter_num} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            with open(chapter_file, 'r', encoding='utf-8') as f:
                chapter_data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self.context_manager.create_context_for_chapter(chapter_num)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            translator = DeepSeekTranslator()
            paragraph_groups = translator._group_paragraphs(chapter_data["paragraphs"], max_chars=800)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
            for block_idx, block_data in enumerate(paragraph_groups):
                task = TranslationTask(
                    chapter_num=chapter_num,
                    chapter_data=chapter_data,
                    context=context,
                    block_idx=block_idx,
                    block_data=block_data,
                    total_blocks=len(paragraph_groups)
                )
                all_tasks.append(task)
        
        self.global_stats["total_blocks"] = len(all_tasks)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        print(Terminal.HIDE_CURSOR, end='', flush=True)
        
        try:
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            self.clear_screen()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
            screen_thread = threading.Thread(target=self.screen_updater_thread, args=(log_messages,))
            screen_thread.daemon = True
            screen_thread.start()
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
                workers = []
                for i in range(self.max_workers):
                    worker = executor.submit(self.worker_thread, i)
                    workers.append(worker)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                for task in all_tasks:
                    self.task_queue.put(task)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results_by_chapter = {}
                processed = 0
                
                while processed < len(all_tasks):
                    try:
                        task, result = self.result_queue.get(timeout=1)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        chapter_num = task.chapter_num
                        if chapter_num not in results_by_chapter:
                            results_by_chapter[chapter_num] = {
                                "chapter_data": task.chapter_data,
                                "blocks": {},
                                "total_blocks": task.total_blocks
                            }
                        
                        results_by_chapter[chapter_num]["blocks"][task.block_idx] = result
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–ª–∏ –ª–∏ –≤—Å—é –≥–ª–∞–≤—É
                        if len(results_by_chapter[chapter_num]["blocks"]) == task.total_blocks:
                            # –°–æ–±–∏—Ä–∞–µ–º –≥–ª–∞–≤—É
                            self._save_chapter(chapter_num, results_by_chapter[chapter_num])
                            self.global_stats["completed_chapters"] += 1
                            log_messages.append(f"‚úÖ –ì–ª–∞–≤–∞ {chapter_num} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                            
                            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
                            del results_by_chapter[chapter_num]
                        
                        processed += 1
                        
                    except queue.Empty:
                        continue
                    except KeyboardInterrupt:
                        log_messages.append("‚è∏Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                        self.stop_flag.set()
                        break
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
                for _ in range(self.max_workers):
                    self.task_queue.put(None)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for worker in workers:
                    worker.result(timeout=5)
        
        finally:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
            print(Terminal.SHOW_CURSOR, end='', flush=True)
            self.stop_flag.set()
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            self.clear_screen()
            self._show_final_stats()
    
    def _save_chapter(self, chapter_num: int, chapter_results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–π –≥–ª–∞–≤—ã"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        all_paragraphs = []
        for i in range(chapter_results["total_blocks"]):
            if i in chapter_results["blocks"]:
                all_paragraphs.extend(chapter_results["blocks"][i]["paragraphs"])
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        translator = DeepSeekTranslator()
        chapter_data = chapter_results["chapter_data"]
        
        translation = {
            "number": chapter_num,
            "title": translator._translate_title(chapter_data["title"]),
            "paragraphs": all_paragraphs,
            "summary": translator._generate_summary(all_paragraphs),
            "original_word_count": chapter_data["word_count"],
            "translator": "DeepSeek Parallel"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        translator.save_translation(chapter_num, translation)
        self.progress_tracker.mark_chapter_complete(chapter_num)
    
    def _show_final_stats(self):
        """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.global_stats["start_time"]:
            return
        
        elapsed = datetime.now() - self.global_stats["start_time"]
        
        print(Colors.BOLD + Colors.BRIGHT_CYAN + "="*80 + Colors.RESET)
        print(Colors.BOLD + Colors.BRIGHT_CYAN + " –ü–ï–†–ï–í–û–î –ó–ê–í–ï–†–®–ï–ù ".center(80, "=") + Colors.RESET)
        print(Colors.BOLD + Colors.BRIGHT_CYAN + "="*80 + Colors.RESET)
        print()
        
        stats = [
            ("‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≥–ª–∞–≤", f"{self.global_stats['completed_chapters']}/{self.global_stats['total_chapters']}"),
            ("üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤", f"{self.global_stats['completed_blocks']}/{self.global_stats['total_blocks']}"),
            ("‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è", str(elapsed).split('.')[0]),
            ("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤", str(self.max_workers)),
            ("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", f"{self.global_stats['chars_sent']:,} —Å–∏–º–≤–æ–ª–æ–≤"),
            ("üì• –ü–æ–ª—É—á–µ–Ω–æ", f"{self.global_stats['chars_received']:,} —Å–∏–º–≤–æ–ª–æ–≤"),
            ("üåê API –∑–∞–ø—Ä–æ—Å–æ–≤", str(self.global_stats['api_calls'])),
            ("‚ùå –û—à–∏–±–æ–∫", str(self.global_stats['api_errors'])),
            ("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", f"${self.global_stats['estimated_cost']:.2f}"),
        ]
        
        if self.global_stats['api_calls'] > 0:
            avg_time = elapsed.total_seconds() / self.global_stats['api_calls']
            stats.append(("‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è/–∑–∞–ø—Ä–æ—Å", f"{avg_time:.1f} —Å–µ–∫"))
            
            # –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
            sequential_time = avg_time * self.global_stats['api_calls']
            speedup = sequential_time / elapsed.total_seconds()
            stats.append(("üèéÔ∏è  –£—Å–∫–æ—Ä–µ–Ω–∏–µ", f"{speedup:.1f}x"))
        
        for label, value in stats:
            print(f"  {label}: {Colors.BRIGHT_GREEN}{value}{Colors.RESET}")
        
        print()
        print(Colors.BRIGHT_YELLOW + "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python main.py compile' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏" + Colors.RESET)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å 25 –ø–æ—Ç–æ–∫–∞–º–∏')
    parser.add_argument('chapters', nargs='*', type=int, help='–ù–æ–º–µ—Ä–∞ –≥–ª–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    parser.add_argument('--workers', '-w', type=int, default=25, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25)')
    parser.add_argument('--all', '-a', action='store_true', help='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –≥–ª–∞–≤—ã')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata_file = Path("extracted_fixed/metadata.json")
    if not metadata_file.exists():
        print(Colors.RED + "‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: python main.py extract" + Colors.RESET)
        return
    
    with open(metadata_file, 'r', encoding='utf-8') as f:
        metadata = json.load(f)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤—ã
    all_chapters = metadata['chapters']
    progress_tracker = TranslationProgress()
    
    if args.chapters:
        chapters = [c for c in all_chapters if c['number'] in args.chapters]
        print(f"{Colors.CYAN}üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã: {args.chapters}{Colors.RESET}")
    elif args.all:
        chapters = all_chapters
        print(f"{Colors.CYAN}üìã –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –≥–ª–∞–≤{Colors.RESET}")
    else:
        chapters = [c for c in all_chapters 
                   if not progress_tracker.is_chapter_translated(c['number'])]
        print(f"{Colors.CYAN}üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤{Colors.RESET}")
    
    if not chapters:
        print(f"{Colors.GREEN}‚úÖ –í—Å–µ –≥–ª–∞–≤—ã —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!{Colors.RESET}")
        return
    
    print(f"{Colors.BOLD}üìö –í—Å–µ–≥–æ –≥–ª–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {len(chapters)}{Colors.RESET}")
    print(f"{Colors.BOLD}üöÄ –ó–∞–ø—É—Å–∫ {args.workers} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤{Colors.RESET}")
    print(f"{Colors.DIM}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞...{Colors.RESET}")
    input()
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    translator = ParallelTranslator(max_workers=args.workers)
    translator.translate_chapters(chapters)


if __name__ == "__main__":
    main()