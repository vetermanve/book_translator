#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Tuple
import argparse


class BookContextExtractor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.context = {
            'title': '',
            'subtitle': '',
            'authors': [],
            'topics': [],
            'structure': {},
            'key_concepts': [],
            'target_audience': '',
            'book_purpose': '',
            'technical_level': '',
            'domain': ''
        }
    
    def extract_from_title_page(self, chapter_files: List[Path]) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–≤–µ–¥–µ–Ω–∏—è"""
        # –û–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–µ –≥–ª–∞–≤—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        intro_text = ""
        
        for file in chapter_files[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –≥–ª–∞–≤—ã
            if file.exists():
                with open(file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if 'title' in data:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        title = data['title']
                        if 'CMMI' in title or 'Maturity' in title:
                            self.context['domain'] = 'process_improvement'
                        
                        if not self.context['title'] and len(title) > 10:
                            self.context['title'] = title
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if 'paragraphs' in data:
                        for para in data['paragraphs'][:5]:
                            if para and not para.startswith('[IMAGE_'):
                                intro_text += para + "\n"
        
        return intro_text
    
    def extract_table_of_contents(self, chapter_files: List[Path]) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏ –∏–∑ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è"""
        toc = []
        
        for file in chapter_files:
            if file.exists():
                with open(file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    chapter_info = {
                        'file': file.name,
                        'title': data.get('title', ''),
                        'paragraphs_count': len(data.get('paragraphs', [])),
                        'has_images': any(p.startswith('[IMAGE_') for p in data.get('paragraphs', []))
                    }
                    toc.append(chapter_info)
        
        return toc
    
    def analyze_key_concepts(self, text: str) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        concepts = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
        patterns = [
            r'–æ—Å–Ω–æ–≤–Ω\w+ (–∫–æ–Ω—Ü–µ–ø—Ü–∏\w+|–ø—Ä–∏–Ω—Ü–∏–ø\w+|–∏–¥–µ—è\w*)',
            r'–∫–ª—é—á–µ–≤\w+ (–º–æ–º–µ–Ω—Ç\w+|–∞—Å–ø–µ–∫—Ç\w+|—ç–ª–µ–º–µ–Ω—Ç\w+)',
            r'–≤–∞–∂–Ω\w+ (–ø–æ–Ω–∏–º–∞—Ç—å|–∑–Ω–∞—Ç—å|—É—á–∏—Ç—ã–≤–∞—Ç—å)',
            r'—Ü–µ–ª—å\w* (–∫–Ω–∏–≥–∏|–≥–ª–∞–≤—ã|—Ä–∞–∑–¥–µ–ª–∞)',
            r'(–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–æ–ø–∏—Å–∞–Ω–∏–µ) \w+',
        ]
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if 'CMMI' in text or '–º–∞—Çurity' in text.lower():
            concepts.extend([
                '–ø—Ä–æ—Ü–µ—Å—Å–Ω–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å',
                '—É—Ä–æ–≤–Ω–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏',
                '–ø—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏',
                '–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
                '–æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
            ])
        
        return concepts
    
    def determine_technical_level(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—Å—Ç–∞"""
        # –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        technical_terms = len(re.findall(r'[A-Z]{2,}', text))
        formulas = len(re.findall(r'[=<>‚â§‚â•‚àà‚àÄ‚àÉ]', text))
        
        if technical_terms > 50 or formulas > 10:
            return "–≤—ã—Å–æ–∫–∏–π"
        elif technical_terms > 20:
            return "—Å—Ä–µ–¥–Ω–∏–π"
        else:
            return "–Ω–∞—á–∞–ª—å–Ω—ã–π"
    
    def generate_context_summary(self, extracted_dir: str = "extracted_fixed") -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–Ω–∏–≥–∏"""
        extracted_path = Path(extracted_dir)
        
        if not extracted_path.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {extracted_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≥–ª–∞–≤
        chapter_files = sorted(extracted_path.glob("chapter_*.json"))
        
        if not chapter_files:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –≥–ª–∞–≤ –≤ {extracted_dir}")
            return None
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(chapter_files)} –≥–ª–∞–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        intro_text = self.extract_from_title_page(chapter_files)
        toc = self.extract_table_of_contents(chapter_files)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        self.context['structure'] = {
            'total_chapters': len(toc),
            'chapters': toc[:10],  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            'has_images': any(ch['has_images'] for ch in toc),
            'average_chapter_size': sum(ch['paragraphs_count'] for ch in toc) // len(toc)
        }
        
        self.context['key_concepts'] = self.analyze_key_concepts(intro_text)
        self.context['technical_level'] = self.determine_technical_level(intro_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if self.context['technical_level'] == "–≤—ã—Å–æ–∫–∏–π":
            self.context['target_audience'] = "–æ–ø—ã—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ —ç–∫—Å–ø–µ—Ä—Ç—ã"
        elif self.context['technical_level'] == "—Å—Ä–µ–¥–Ω–∏–π":
            self.context['target_audience'] = "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"
        else:
            self.context['target_audience'] = "–Ω–∞—á–∏–Ω–∞—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –∫–Ω–∏–≥–∏
        if 'CMMI' in intro_text:
            self.context['book_purpose'] = """
            –≠—Ç–∞ –∫–Ω–∏–≥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å CMMI –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.
            –û–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
            –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∏—á—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –∑—Ä–µ–ª–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
            """
        
        return self.context
    
    def save_context(self, output_file: str = "book_context.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª"""
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(self.context, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        return self.context
    
    def print_context_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        print("\nüìñ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–Ω–∏–≥–∏:")
        print("=" * 60)
        
        if self.context['title']:
            print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {self.context['title']}")
        
        print(f"üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {self.context['target_audience']}")
        print(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {self.context['technical_level']}")
        
        if self.context['domain']:
            print(f"üî¨ –ü—Ä–µ–¥–º–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: {self.context['domain']}")
        
        if self.context['structure']:
            print(f"üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            print(f"   ‚Ä¢ –ì–ª–∞–≤: {self.context['structure']['total_chapters']}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤—ã: {self.context['structure']['average_chapter_size']} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
            print(f"   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã: {'–î–∞' if self.context['structure']['has_images'] else '–ù–µ—Ç'}")
        
        if self.context['key_concepts']:
            print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:")
            for concept in self.context['key_concepts'][:5]:
                print(f"   ‚Ä¢ {concept}")


def main():
    parser = argparse.ArgumentParser(description='–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏')
    parser.add_argument('--input-dir', default='extracted_fixed',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –≥–ª–∞–≤–∞–º–∏')
    parser.add_argument('--output', default='book_context.json',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
    
    args = parser.parse_args()
    
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏")
    print("=" * 60)
    
    extractor = BookContextExtractor()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = extractor.generate_context_summary(args.input_dir)
    
    if context:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        extractor.save_context(args.output)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        extractor.print_context_summary()
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
        print(f"   python3 10_adapt_for_audio.py --context {args.output}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")


if __name__ == "__main__":
    main()