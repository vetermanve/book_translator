#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º edge-tts
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ 25 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import json
import os
import sys
import time
import asyncio
import argparse
import resource
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
import subprocess
from typing import List, Tuple, Optional
import hashlib
import re

# –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
from tqdm import tqdm

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å edge-tts
try:
    import edge_tts
except ImportError:
    print("‚ùå edge-tts –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install edge-tts")
    sys.exit(1)

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pydub –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
try:
    from pydub import AudioSegment
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pydub –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    AudioSegment.empty()
    PYDUB_AVAILABLE = True
except (ImportError, Exception):
    # pydub –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Python 3.13+
    AudioSegment = None
    PYDUB_AVAILABLE = False


class AudioBookGenerator:
    def __init__(self, translations_dir="translations", output_dir="audiobook", workers=25, paragraphs_per_group=3, enable_phonetic=True):
        self.translations_dir = Path(translations_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        self.temp_dir = self.output_dir / "temp_audio"
        self.temp_dir.mkdir(exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        self.workers = self._get_safe_worker_count(workers)
        self.paragraphs_per_group = paragraphs_per_group  # –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        self.enable_phonetic = enable_phonetic  # –í–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫—É—é –∑–∞–º–µ–Ω—É
        
        # –ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏ (—Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ edge-tts)
        self.voices = {
            'male': 'ru-RU-DmitryNeural',      # –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å
            'female': 'ru-RU-SvetlanaNeural'   # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
        }
        self.selected_voice = self.voices['male']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∂—Å–∫–æ–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—á–∏
        self.rate = "+0%"  # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å: -50% –¥–æ +100%)
        self.volume = "+0%"  # –ì—Ä–æ–º–∫–æ—Å—Ç—å (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å: -50% –¥–æ +100%)
        
        self.metadata = {
            "chapters": [],
            "total_duration": 0,
            "voice": self.selected_voice,
            "generation_date": datetime.now().isoformat()
        }
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã
        self._first_phonetic = True
        
        # –°–ª–æ–≤–∞—Ä—å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ–Ω –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        if self.enable_phonetic:
            self._init_phonetic_replacements()
    
    def _init_phonetic_replacements(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ–Ω"""
        self.phonetic_replacements = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã CMMI
            'CMMI': '—Å–∏-—ç–º-—ç–º-–∞–π',
            'SEI': '—ç—Å-–∏-–∞–π',
            'SCAMPI': '—Å–∫–∞–º–ø–∏',
            'CMU': '—Å–∏-—ç–º-—é',
            
            # –ü—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            'CAR': '—Å–∏-—ç–π-–∞—Ä',
            'CM': '—Å–∏-—ç–º',
            'DAR': '–¥–∏-—ç–π-–∞—Ä',
            'IPM': '–∞–π-–ø–∏-—ç–º',
            'MA': '—ç–º-—ç–π',
            'OPD': '–æ—É-–ø–∏-–¥–∏',
            'OPF': '–æ—É-–ø–∏-—ç—Ñ',
            'OPM': '–æ—É-–ø–∏-—ç–º',
            'OPP': '–æ—É-–ø–∏-–ø–∏',
            'OT': '–æ—É-—Ç–∏',
            'PI': '–ø–∏-–∞–π',
            'PMC': '–ø–∏-—ç–º-—Å–∏',
            'PP': '–ø–∏-–ø–∏',
            'PPQA': '–ø–∏-–ø–∏-–∫—å—é-—ç–π',
            'QPM': '–∫—å—é-–ø–∏-—ç–º',
            'RD': '–∞—Ä-–¥–∏',
            'REQM': '—Ä–µ–∫-—ç–º',
            'RSKM': '—Ä–∏—Å–∫-—ç–º',
            'SAM': '—Å—ç–º',
            
            # –¢–µ—Ä–º–∏–Ω—ã
            'Process Area': '–ø—Ä–æÃÅ—Ü–µ—Å—Å —çÃÅ—Ä–∏–∞',
            'Process Areas': '–ø—Ä–æÃÅ—Ü–µ—Å—Å —çÃÅ—Ä–∏–∞–∑',
            'Maturity Level': '–º—ç—Ç—å—éÃÅ—Ä–∏—Ç–∏ –ª–µÃÅ–≤–µ–ª',
            'Capability Level': '–∫–µ–π–ø—ç–±–∏ÃÅ–ª–∏—Ç–∏ –ª–µÃÅ–≤–µ–ª',
            'Generic Goal': '–¥–∂–µ–Ω–µÃÅ—Ä–∏–∫ –≥–æ—É–ª',
            'Specific Goal': '—Å–ø–µ—Ü–∏ÃÅ—Ñ–∏–∫ –≥–æ—É–ª',
            'Generic Practice': '–¥–∂–µ–Ω–µÃÅ—Ä–∏–∫ –ø—Ä—çÃÅ–∫—Ç–∏—Å',
            'Specific Practice': '—Å–ø–µ—Ü–∏ÃÅ—Ñ–∏–∫ –ø—Ä—çÃÅ–∫—Ç–∏—Å',
            'Generic Goals': '–¥–∂–µ–Ω–µÃÅ—Ä–∏–∫ –≥–æ—É–ª–∑',
            'Specific Goals': '—Å–ø–µ—Ü–∏ÃÅ—Ñ–∏–∫ –≥–æ—É–ª–∑',
            
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            'Software Engineering Institute': '—Å–æÃÅ—Ñ—Ç–≤–µ—Ä —ç–Ω–∂–∏–Ω–∏ÃÅ—Ä–∏–Ω–≥ –∏ÃÅ–Ω—Å—Ç–∏—Ç—å—é—Ç',
            'Carnegie Mellon University': '–∫–∞ÃÅ—Ä–Ω–µ–≥–∏ –º–µÃÅ–ª–ª–æ–Ω —é–Ω–∏–≤–µÃÅ—Ä—Å–∏—Ç–∏',
            'Carnegie Mellon': '–∫–∞ÃÅ—Ä–Ω–µ–≥–∏ –º–µÃÅ–ª–ª–æ–Ω',
            
            # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
            'Agile': '—çÃÅ–¥–∂–∞–π–ª',
            'Scrum': '—Å–∫—Ä–∞–º',
            'DevOps': '–¥–µ–≤-–æ–ø—Å',
            'Waterfall': '–≤–æÃÅ—Ç–µ—Ä—Ñ–æ–ª',
            
            # –í–µ—Ä—Å–∏–∏
            'Version': '–≤—ë—Ä—à–Ω',
            'Development': '–¥–µ–≤–µ–ª–æÃÅ–ø–º–µ–Ω—Ç',
            'Acquisition': '—ç–∫–≤–∏–∑–∏ÃÅ—à–Ω',
            'Services': '—Å—ë—Ä–≤–∏—Å–µ–∑',
            
            # –£—Ä–æ–≤–Ω–∏
            'Level 1': '–ª–µ–≤–µ–ª –≤–∞–Ω',
            'Level 2': '–ª–µ–≤–µ–ª —Ç—É',
            'Level 3': '–ª–µ–≤–µ–ª —Ñ—Ä–∏',
            'Level 4': '–ª–µ–≤–µ–ª —Ñ–æ—Ä',
            'Level 5': '–ª–µ–≤–µ–ª —Ñ–∞–π–≤',
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä
        abbreviations = ['CMMI', 'SEI', 'CAR', 'CM', 'DAR', 'IPM', 'MA', 
                        'OPD', 'OPF', 'OPM', 'OPP', 'OT', 'PI', 'PMC', 
                        'PP', 'PPQA', 'QPM', 'RD', 'REQM', 'RSKM', 'SAM']
        
        for abbr in abbreviations:
            dotted = '.'.join(abbr) + '.'  # C.M.M.I.
            if dotted not in self.phonetic_replacements:
                self.phonetic_replacements[dotted] = self.phonetic_replacements[abbr]
    
    def _get_safe_worker_count(self, requested_workers):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
            soft_limit, hard_limit = resource.getrlimit(resource.RLIMIT_NOFILE)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã (50% –æ—Ç –ª–∏–º–∏—Ç–∞)
            safe_limit = soft_limit // 2
            
            # –ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 10)
            max_workers = safe_limit // 10
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ
            actual_workers = min(requested_workers, max_workers)
            
            if actual_workers < requested_workers:
                print(f"‚ö†Ô∏è –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å {requested_workers} –¥–æ {actual_workers}")
                print(f"   (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {soft_limit})")
                print(f"   –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ulimit -n 4096")
            
            return max(1, actual_workers)  # –ú–∏–Ω–∏–º—É–º 1 –≤–æ—Ä–∫–µ—Ä
            
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏–º–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return min(requested_workers, 10)
    
    def get_available_voices(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤"""
        print("üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞:")
        voices = [
            ("ru-RU-DmitryNeural", "–î–º–∏—Ç—Ä–∏–π (–º—É–∂—Å–∫–æ–π)"),
            ("ru-RU-SvetlanaNeural", "–°–≤–µ—Ç–ª–∞–Ω–∞ (–∂–µ–Ω—Å–∫–∏–π)"),
            ("ru-RU-DariyaNeural", "–î–∞—Ä—å—è (–∂–µ–Ω—Å–∫–∏–π)")
        ]
        for voice_id, name in voices:
            print(f"  ‚Ä¢ {voice_id}: {name}")
        return voices
    
    def load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤"""
        chapters = []
        
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        translation_files = sorted(self.translations_dir.glob("chapter_*_translated.json"))
        
        if not translation_files:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –≤ {self.translations_dir}")
            return chapters
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(translation_files)} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤")
        
        for file_path in translation_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    chapter_data = json.load(f)
                    chapters.append(chapter_data)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        
        return chapters
    
    def apply_phonetic_replacements(self, text):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        if not self.enable_phonetic:
            return text
            
        result = text
        replacements_made = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã)
        sorted_terms = sorted(self.phonetic_replacements.items(), 
                            key=lambda x: len(x[0]), 
                            reverse=True)
        
        for term, phonetic in sorted_terms:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            pattern = r'\b' + re.escape(term) + r'\b'
            if re.search(pattern, result, flags=re.IGNORECASE):
                result = re.sub(pattern, phonetic, result, flags=re.IGNORECASE)
                replacements_made.append(term)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ–Ω–∞—Ö —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if replacements_made and self._first_phonetic:
            self._first_phonetic = False
            print(f"\nüî§ –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞! –ó–∞–º–µ–Ω–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(replacements_made)}")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(replacements_made[:5])}")
            print(f"   –≠—Ç–∏ —Ç–µ—Ä–º–∏–Ω—ã –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å—Å—è –ø–æ-—Ä—É—Å—Å–∫–∏")
        
        return result
    
    def prepare_text_for_speech(self, text):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω–æ–π"""
        # –£–±–∏—Ä–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        text = re.sub(r'\[IMAGE_[^\]]+\]', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        text = self.apply_phonetic_replacements(text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        text = re.sub(r'([.!?])\s+', r'\1\n', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = text.strip()
        
        return text
    
    async def generate_audio_chunk(self, text, output_file, chunk_id=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω–æ–π
            prepared_text = self.prepare_text_for_speech(text)
            
            if not prepared_text:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            communicate = edge_tts.Communicate(
                prepared_text,
                self.selected_voice,
                rate=self.rate,
                volume=self.volume
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            await communicate.save(str(output_file))
            
            return output_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ {chunk_id}: {e}")
            return None
    
    def generate_chapter_audio_sync(self, chapter_data, chapter_num):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≥–ª–∞–≤—ã"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(
                self.generate_chapter_audio(chapter_data, chapter_num)
            )
        finally:
            loop.close()
    
    async def generate_chapter_audio(self, chapter_data, chapter_num):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã"""
        chapter_audio_files = []
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã
        chapter_title = chapter_data.get('title', f'–ì–ª–∞–≤–∞ {chapter_num}')
        intro_text = f"–ì–ª–∞–≤–∞ {chapter_num}. {chapter_title}."
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        intro_file = self.temp_dir / f"chapter_{chapter_num:03d}_intro.mp3"
        await self.generate_audio_chunk(intro_text, intro_file, f"ch{chapter_num}_intro")
        if intro_file.exists():
            chapter_audio_files.append(intro_file)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        paragraphs = chapter_data.get('paragraphs', [])
        
        for para_idx, paragraph in enumerate(paragraphs):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not paragraph or paragraph.startswith('[IMAGE_'):
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            para_file = self.temp_dir / f"chapter_{chapter_num:03d}_para_{para_idx:04d}.mp3"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            result = await self.generate_audio_chunk(
                paragraph, 
                para_file, 
                f"ch{chapter_num}_p{para_idx}"
            )
            
            if result:
                chapter_audio_files.append(para_file)
        
        return chapter_audio_files
    
    def merge_audio_files(self, audio_files, output_file):
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω"""
        if not PYDUB_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –Ω–∞–ø—Ä—è–º—É—é (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            return self.merge_with_ffmpeg(audio_files, output_file)
        
        try:
            combined = AudioSegment.empty()
            
            for audio_file in audio_files:
                if audio_file.exists():
                    audio = AudioSegment.from_mp3(str(audio_file))
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏
                    combined += audio + AudioSegment.silent(duration=300)  # 300ms –ø–∞—É–∑–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            combined.export(str(output_file), format="mp3")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–ª–µ–π–∫–µ —á–µ—Ä–µ–∑ pydub: {e}")
            print("   –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ ffmpeg...")
            return self.merge_with_ffmpeg(audio_files, output_file)
    
    def merge_with_ffmpeg(self, audio_files, output_file):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∫–ª–µ–π–∫–∞ —á–µ—Ä–µ–∑ ffmpeg"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–ª—è ffmpeg
            list_file = self.temp_dir / "concat_list.txt"
            with open(list_file, 'w') as f:
                for audio_file in audio_files:
                    if audio_file.exists():
                        f.write(f"file '{audio_file.absolute()}'\n")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
            cmd = [
                'ffmpeg', '-y',
                '-f', 'concat',
                '-safe', '0',
                '-i', str(list_file),
                '-c', 'copy',
                str(output_file)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return True
            else:
                print(f"‚ùå ffmpeg error: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–ª–µ–π–∫–µ —á–µ—Ä–µ–∑ ffmpeg: {e}")
            return False
    
    async def generate_audio_wrapper(self, text, output_file, chunk_id):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        try:
            result = await self.generate_audio_chunk(text, output_file, chunk_id)
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {chunk_id}: {e}")
            return None
    
    def generate_single_audio_sync(self, task):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"""
        text, output_file, chunk_id = task
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result = loop.run_until_complete(
                self.generate_audio_wrapper(text, output_file, chunk_id)
            )
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_single_audio_sync –¥–ª—è {chunk_id}: {e}")
            return None
        finally:
            # –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã–≤–∞–µ–º loop –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            try:
                loop.close()
            except:
                pass
    
    def prepare_generation_tasks(self, chapters):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –≥—Ä—É–ø–ø–∞–º–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤"""
        tasks = []
        
        for chapter_idx, chapter_data in enumerate(chapters):
            chapter_num = chapter_idx
            chapter_title = chapter_data.get('title', f'–ì–ª–∞–≤–∞ {chapter_num}')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≥–ª–∞–≤—ã
            intro_text = f"–ì–ª–∞–≤–∞ {chapter_num}. {chapter_title}."
            intro_file = self.temp_dir / f"chapter_{chapter_num:03d}_intro.mp3"
            tasks.append((intro_text, intro_file, f"ch{chapter_num}_intro"))
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ 3 —à—Ç—É–∫–∏ (–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ)
            paragraphs = chapter_data.get('paragraphs', [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            text_paragraphs = []
            for para in paragraphs:
                if para and not para.startswith('[IMAGE_'):
                    text_paragraphs.append(para)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            for group_idx in range(0, len(text_paragraphs), self.paragraphs_per_group):
                group_end = min(group_idx + self.paragraphs_per_group, len(text_paragraphs))
                paragraph_group = text_paragraphs[group_idx:group_end]
                
                if paragraph_group:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –ø–∞—É–∑–∞–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
                    group_text = "\n\n".join(paragraph_group)
                    group_file = self.temp_dir / f"chapter_{chapter_num:03d}_group_{group_idx//self.paragraphs_per_group:03d}.mp3"
                    tasks.append((group_text, group_file, f"ch{chapter_num}_g{group_idx//self.paragraphs_per_group}"))
        
        return tasks
    
    def generate_audiobook_parallel(self, chapters):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏"""
        print(f"\nüéôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏...")
        print(f"   –ì–æ–ª–æ—Å: {self.selected_voice}")
        print(f"   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {self.workers}")
        print(f"   –ì–ª–∞–≤: {len(chapters)}")
        print(f"   –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {self.paragraphs_per_group}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            soft, hard = resource.getrlimit(resource.RLIMIT_NOFILE)
            if soft < 4096:
                resource.setrlimit(resource.RLIMIT_NOFILE, (min(4096, hard), hard))
                print(f"   –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –¥–æ {min(4096, hard)}")
        except:
            pass
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        tasks = self.prepare_generation_tasks(chapters)
        print(f"   –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(tasks)}")
        
        generated_files = {}
        failed_tasks = []
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º thread_name_prefix –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        with ThreadPoolExecutor(
            max_workers=self.workers,
            thread_name_prefix="AudioGen"
        ) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            future_to_task = {
                executor.submit(self.generate_single_audio_sync, task): task
                for task in tasks
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            with tqdm(total=len(tasks), desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤") as pbar:
                for future in as_completed(future_to_task):
                    task = future_to_task[future]
                    try:
                        result = future.result()
                        if result and result.exists():
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∫–ª—é—á–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                            output_file = task[1]
                            generated_files[str(output_file)] = output_file
                    except Exception as e:
                        chunk_id = task[2]
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {chunk_id}: {e}")
                        failed_tasks.append(task)
                    finally:
                        pbar.update(1)
        
        if failed_tasks:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å {len(failed_tasks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
            retry = input("   –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤? (y/n): ")
            if retry.lower() == 'y':
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                retry_workers = max(1, min(5, self.workers // 2))
                print(f"   –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å {retry_workers} –ø–æ—Ç–æ–∫–∞–º–∏...")
                with ThreadPoolExecutor(
                    max_workers=retry_workers,
                    thread_name_prefix="AudioRetry"
                ) as executor:
                    for task in failed_tasks:
                        try:
                            result = executor.submit(self.generate_single_audio_sync, task).result()
                            if result and result.exists():
                                output_file = task[1]
                                generated_files[str(output_file)] = output_file
                        except Exception as e:
                            print(f"   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        sorted_files = sorted(generated_files.values(), key=lambda x: x.name)
        
        return sorted_files
    
    def create_audiobook(self, voice='male', rate="+0%", volume="+0%"):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.selected_voice = self.voices.get(voice, self.voices['male'])
        self.rate = rate
        self.volume = volume
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        chapters = self.load_translations()
        if not chapters:
            print("‚ùå –ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏")
            return False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        audio_files = self.generate_audiobook_parallel(chapters)
        
        if not audio_files:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã")
            return False
        
        print(f"\nüìÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞—É–¥–∏–æ–∫–Ω–∏–≥—É
        final_audiobook = self.output_dir / "audiobook_complete.mp3"
        print(f"üéµ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞—É–¥–∏–æ–∫–Ω–∏–≥—É...")
        
        if self.merge_audio_files(audio_files, final_audiobook):
            print(f"‚úÖ –ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: {final_audiobook}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = final_audiobook.stat().st_size / (1024 * 1024)  # –í –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
            print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self.save_metadata(len(chapters), len(audio_files))
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if input("\nüóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã? (y/n): ").lower() == 'y':
                self.cleanup_temp_files()
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞—É–¥–∏–æ–∫–Ω–∏–≥—É")
            return False
    
    def cleanup_temp_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üßπ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        for temp_file in self.temp_dir.glob("*.mp3"):
            temp_file.unlink()
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
    def save_metadata(self, chapters_count, fragments_count):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏"""
        self.metadata['chapters_count'] = chapters_count
        self.metadata['fragments_count'] = fragments_count
        
        metadata_file = self.output_dir / "audiobook_metadata.json"
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.metadata, f, ensure_ascii=False, indent=2)


def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
    parser.add_argument('--voice', choices=['male', 'female'], default='male',
                       help='–ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: male)')
    parser.add_argument('--rate', default='+0%',
                       help='–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (-50%% –¥–æ +100%%, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: +0%%)')
    parser.add_argument('--volume', default='+0%',
                       help='–ì—Ä–æ–º–∫–æ—Å—Ç—å (-50%% –¥–æ +100%%, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: +0%%)')
    parser.add_argument('--workers', type=int, default=25,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 25)')
    parser.add_argument('--paragraphs-per-group', type=int, default=3,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3, –∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ)')
    parser.add_argument('--disable-phonetic', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫—É—é –∑–∞–º–µ–Ω—É –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤')
    parser.add_argument('--translations-dir', default='translations',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: translations)')
    parser.add_argument('--list-voices', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = AudioBookGenerator(
        translations_dir=args.translations_dir,
        workers=args.workers,
        paragraphs_per_group=args.paragraphs_per_group,
        enable_phonetic=not args.disable_phonetic
    )
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
    if args.list_voices:
        generator.get_available_voices()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥—É
    print("üéß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ v1.0")
    print("=" * 50)
    
    success = generator.create_audiobook(
        voice=args.voice,
        rate=args.rate,
        volume=args.volume
    )
    
    if success:
        print("\nüéâ –ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        print("üìÅ –§–∞–π–ª—ã:")
        print(f"   ‚Ä¢ audiobook/audiobook_complete.mp3 - –ø–æ–ª–Ω–∞—è –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞")
        print(f"   ‚Ä¢ audiobook/audiobook_metadata.json - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()