#!/usr/bin/env python3
"""
–§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
–¢–∞–∫ –∫–∞–∫ edge-tts –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SSML, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
"""

import json
import re
from pathlib import Path
from typing import Dict, List

class PhoneticReplacer:
    def __init__(self):
        """–°–ª–æ–≤–∞—Ä—å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ–Ω –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        self.replacements = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã CMMI
            'CMMI': '—Å–∏-—ç–º-—ç–º-–∞–π',
            'SEI': '—ç—Å-–∏-–∞–π',
            'SCAMPI': '—Å–∫–∞–º–ø–∏',
            'CMU': '—Å–∏-—ç–º-—é',
            
            # –ü—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            'CAR': '—Å–∏-—ç–π-–∞—Ä',
            'CM': '—Å–∏-—ç–º',
            'DAR': '–¥–∏-—ç–π-–∞—Ä',
            'IPM': '–∞–π-–ø–∏-—ç–º',
            'MA': '—ç–º-—ç–π',
            'OPD': '–æ—É-–ø–∏-–¥–∏',
            'OPF': '–æ—É-–ø–∏-—ç—Ñ',
            'OPM': '–æ—É-–ø–∏-—ç–º',
            'OPP': '–æ—É-–ø–∏-–ø–∏',
            'OT': '–æ—É-—Ç–∏',
            'PI': '–ø–∏-–∞–π',
            'PMC': '–ø–∏-—ç–º-—Å–∏',
            'PP': '–ø–∏-–ø–∏',
            'PPQA': '–ø–∏-–ø–∏-–∫—å—é-—ç–π',
            'QPM': '–∫—å—é-–ø–∏-—ç–º',
            'RD': '–∞—Ä-–¥–∏',
            'REQM': '—Ä–µ–∫-—ç–º',
            'RSKM': '—Ä–∏—Å–∫-—ç–º',
            'SAM': '—Å—ç–º',
            
            # –¢–µ—Ä–º–∏–Ω—ã
            'Process Area': '–ø—Ä–æÃÅ—Ü–µ—Å—Å —çÃÅ—Ä–∏–∞',
            'Process Areas': '–ø—Ä–æÃÅ—Ü–µ—Å—Å —çÃÅ—Ä–∏–∞–∑',
            'Maturity Level': '–º—ç—Ç—å—éÃÅ—Ä–∏—Ç–∏ –ª–µÃÅ–≤–µ–ª',
            'Capability Level': '–∫–µ–π–ø—ç–±–∏ÃÅ–ª–∏—Ç–∏ –ª–µÃÅ–≤–µ–ª',
            'Generic Goal': '–¥–∂–µ–Ω–µÃÅ—Ä–∏–∫ –≥–æ—É–ª',
            'Specific Goal': '—Å–ø–µ—Ü–∏ÃÅ—Ñ–∏–∫ –≥–æ—É–ª',
            'Generic Practice': '–¥–∂–µ–Ω–µÃÅ—Ä–∏–∫ –ø—Ä—çÃÅ–∫—Ç–∏—Å',
            'Specific Practice': '—Å–ø–µ—Ü–∏ÃÅ—Ñ–∏–∫ –ø—Ä—çÃÅ–∫—Ç–∏—Å',
            'Generic Goals': '–¥–∂–µ–Ω–µÃÅ—Ä–∏–∫ –≥–æ—É–ª–∑',
            'Specific Goals': '—Å–ø–µ—Ü–∏ÃÅ—Ñ–∏–∫ –≥–æ—É–ª–∑',
            
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            'Software Engineering Institute': '—Å–æÃÅ—Ñ—Ç–≤–µ—Ä —ç–Ω–∂–∏–Ω–∏ÃÅ—Ä–∏–Ω–≥ –∏ÃÅ–Ω—Å—Ç–∏—Ç—å—é—Ç',
            'Carnegie Mellon University': '–∫–∞ÃÅ—Ä–Ω–µ–≥–∏ –º–µÃÅ–ª–ª–æ–Ω —é–Ω–∏–≤–µÃÅ—Ä—Å–∏—Ç–∏',
            'Carnegie Mellon': '–∫–∞ÃÅ—Ä–Ω–µ–≥–∏ –º–µÃÅ–ª–ª–æ–Ω',
            
            # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
            'Agile': '—çÃÅ–¥–∂–∞–π–ª',
            'Scrum': '—Å–∫—Ä–∞–º',
            'DevOps': '–¥–µ–≤-–æ–ø—Å',
            'Waterfall': '–≤–æÃÅ—Ç–µ—Ä—Ñ–æ–ª',
            
            # –í–µ—Ä—Å–∏–∏
            'Version': '–≤—ë—Ä—à–Ω',
            'Development': '–¥–µ–≤–µ–ª–æÃÅ–ø–º–µ–Ω—Ç',
            'Acquisition': '—ç–∫–≤–∏–∑–∏ÃÅ—à–Ω',
            'Services': '—Å—ë—Ä–≤–∏—Å–µ–∑',
            
            # –£—Ä–æ–≤–Ω–∏
            'Level 1': '–ª–µ–≤–µ–ª –≤–∞–Ω',
            'Level 2': '–ª–µ–≤–µ–ª —Ç—É',
            'Level 3': '–ª–µ–≤–µ–ª —Ñ—Ä–∏',
            'Level 4': '–ª–µ–≤–µ–ª —Ñ–æ—Ä',
            'Level 5': '–ª–µ–≤–µ–ª —Ñ–∞–π–≤',
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏
        abbreviations = ['CMMI', 'SEI', 'CAR', 'CM', 'DAR', 'IPM', 'MA', 
                        'OPD', 'OPF', 'OPM', 'OPP', 'OT', 'PI', 'PMC', 
                        'PP', 'PPQA', 'QPM', 'RD', 'REQM', 'RSKM', 'SAM']
        
        for abbr in abbreviations:
            dotted = '.'.join(abbr) + '.'  # C.M.M.I.
            if dotted not in self.replacements:
                self.replacements[dotted] = self.replacements[abbr]
    
    def replace_in_text(self, text: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"""
        result = text
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã)
        sorted_terms = sorted(self.replacements.items(), 
                            key=lambda x: len(x[0]), 
                            reverse=True)
        
        for term, phonetic in sorted_terms:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            pattern = r'\b' + re.escape(term) + r'\b'
            result = re.sub(pattern, phonetic, result, flags=re.IGNORECASE)
        
        return result
    
    def process_file(self, input_file: Path, output_file: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if 'title' in data:
            data['title'] = self.replace_in_text(data['title'])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        if 'paragraphs' in data:
            data['paragraphs'] = [
                self.replace_in_text(p) if p and not p.startswith('[IMAGE_') else p
                for p in data['paragraphs']
            ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def process_directory(self, input_dir: str = "translations", 
                         output_dir: str = "translations_phonetic"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        input_path = Path(input_dir)
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        files = list(input_path.glob("*_translated.json"))
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files)}")
        
        for file in files:
            output_file = output_path / file.name
            self.process_file(file, output_file)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {file.name}")
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω–æ–π –≤: {output_path}")
        return output_path

def test_replacements():
    """–¢–µ—Å—Ç —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ–Ω"""
    replacer = PhoneticReplacer()
    
    test_texts = [
        "–ú–æ–¥–µ–ª—å CMMI –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ OPD –∏ OPF.",
        "Process Area –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç Maturity Level 3.",
        "Software Engineering Institute —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª SCAMPI.",
        "Generic Goals –∏ Specific Practices –≤ Agile."
    ]
    
    print("üß™ –¢–µ—Å—Ç —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ–Ω:")
    print("=" * 60)
    
    for text in test_texts:
        replaced = replacer.replace_in_text(text)
        print(f"\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π: {text}")
        print(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ: {replaced}")
    
    print("\n" + "=" * 60)
    print("–≠—Ç–∏ –∑–∞–º–µ–Ω—ã –ø–æ–º–æ–≥—É—Ç edge-tts –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

if __name__ == "__main__":
    import sys
    
    if '--test' in sys.argv:
        test_replacements()
    else:
        print("üéôÔ∏è –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
        print("=" * 60)
        
        replacer = PhoneticReplacer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if Path("translations").exists():
            output_dir = replacer.process_directory()
            print(f"\nüí° –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:")
            print(f"   python3 05_create_audiobook.py --translations-dir {output_dir}")
        else:
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è translations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("   –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∫–Ω–∏–≥–∏")