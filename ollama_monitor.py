#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è Ollama - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∑–∞–≥—Ä—É–∑–∫—É
"""

import requests
import json
import time
import sys
from datetime import datetime, timedelta
import subprocess
import psutil

def get_ollama_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama —á–µ—Ä–µ–∑ API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        ps_response = requests.get('http://localhost:11434/api/ps', timeout=2)
        ps_data = ps_response.json()
        
        return ps_data
    except requests.exceptions.RequestException as e:
        return {"error": str(e)}
    except Exception as e:
        return {"error": str(e)}

def get_system_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = {
        'cpu_percent': psutil.cpu_percent(interval=0.1),
        'memory_percent': psutil.virtual_memory().percent,
        'memory_used_gb': psutil.virtual_memory().used / (1024**3),
        'memory_total_gb': psutil.virtual_memory().total / (1024**3)
    }
    return stats

def format_time_delta(expires_at_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º ISO –≤—Ä–µ–º—è
        expires_at = datetime.fromisoformat(expires_at_str.replace('Z', '+00:00'))
        now = datetime.now(expires_at.tzinfo)
        delta = expires_at - now
        
        if delta.total_seconds() > 0:
            minutes = int(delta.total_seconds() / 60)
            seconds = int(delta.total_seconds() % 60)
            return f"{minutes}:{seconds:02d}"
        else:
            return "–∏—Å—Ç–µ–∫–ª–æ"
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} TB"

def check_ollama_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ Ollama"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
        result = subprocess.run(
            ['tail', '-n', '20', '/tmp/ollama.log'],
            capture_output=True,
            text=True,
            timeout=1
        )
        if result.returncode == 0:
            return result.stdout
    except:
        pass
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ journalctl
    try:
        result = subprocess.run(
            ['journalctl', '-u', 'ollama', '-n', '20', '--no-pager'],
            capture_output=True,
            text=True,
            timeout=1
        )
        if result.returncode == 0:
            return result.stdout
    except:
        pass
    
    return None

def monitor_loop(interval=1):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\033[2J\033[H")  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
    print("üîç –ú–û–ù–ò–¢–û–† OLLAMA")
    print("=" * 60)
    
    log_messages = []
    
    try:
        while True:
            # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
            print("\033[H")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            print("üîç –ú–û–ù–ò–¢–û–† OLLAMA".ljust(60))
            print("=" * 60)
            print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print()
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            sys_stats = get_system_stats()
            print("üìä –°–ò–°–¢–ï–ú–ê:")
            print(f"   CPU: {sys_stats['cpu_percent']:5.1f}%")
            print(f"   RAM: {sys_stats['memory_used_gb']:.1f}/{sys_stats['memory_total_gb']:.1f} GB ({sys_stats['memory_percent']:.1f}%)")
            print()
            
            # –°—Ç–∞—Ç—É—Å Ollama
            status = get_ollama_status()
            
            if "error" in status:
                print("‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö OLLAMA:")
                print(f"   {status['error']}")
                print()
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞:")
                print("   ollama serve")
            else:
                models = status.get("models", [])
                
                if models:
                    print(f"ü§ñ –ê–ö–¢–ò–í–ù–´–ï –ú–û–î–ï–õ–ò ({len(models)}):")
                    print()
                    
                    for i, model in enumerate(models, 1):
                        name = model.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        size = model.get("size", 0)
                        size_vram = model.get("size_vram", 0)
                        context_len = model.get("context_length", 0)
                        expires = model.get("expires_at", "")
                        
                        print(f"   [{i}] {name}")
                        print(f"       üì¶ –†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {format_size(size)}")
                        print(f"       üéÆ VRAM: {format_size(size_vram)}")
                        print(f"       üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_len} —Ç–æ–∫–µ–Ω–æ–≤")
                        print(f"       ‚è±Ô∏è  –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {format_time_delta(expires)}")
                        
                        # –î–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏
                        details = model.get("details", {})
                        if details:
                            param_size = details.get("parameter_size", "")
                            quant = details.get("quantization_level", "")
                            if param_size or quant:
                                print(f"       üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {param_size} / {quant}")
                        print()
                else:
                    print("üí§ –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ú–û–î–ï–õ–ï–ô")
                    print()
                    print("–ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                    print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            print("üîÑ –ü–†–û–¶–ï–°–°–´:")
            ollama_procs = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                if 'ollama' in proc.info['name'].lower():
                    ollama_procs.append(proc)
            
            if ollama_procs:
                for proc in ollama_procs:
                    try:
                        print(f"   PID {proc.pid}: {proc.info['name']} | CPU: {proc.cpu_percent():.1f}% | RAM: {proc.memory_percent():.1f}%")
                    except:
                        pass
            else:
                print("   –ü—Ä–æ—Ü–µ—Å—Å—ã Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print()
            print("-" * 60)
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞ | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É")
            
            # –ñ–¥–µ–º
            time.sleep(interval)
            
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

def check_active_requests():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò:")
    print("-" * 40)
    
    # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ netstat
    try:
        result = subprocess.run(
            ['netstat', '-an'],
            capture_output=True,
            text=True,
            timeout=2
        )
        if result.returncode == 0:
            lines = result.stdout.split('\n')
            ollama_connections = [l for l in lines if '11434' in l and 'ESTABLISHED' in l]
            if ollama_connections:
                print(f"üì° –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {len(ollama_connections)}")
                for conn in ollama_connections[:5]:
                    print(f"   {conn[:80]}")
            else:
                print("üì° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ø–æ—Ä—Ç—É 11434")
    except:
        pass
    
    # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    print("\nüíª –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–¶–ï–°–°–û–†–ê:")
    try:
        result = subprocess.run(
            ['top', '-l', '1', '-n', '5'],
            capture_output=True,
            text=True,
            timeout=2
        )
        if result.returncode == 0:
            lines = result.stdout.split('\n')
            for line in lines:
                if 'ollama' in line.lower():
                    print(f"   {line[:100]}")
    except:
        pass

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è Ollama')
    parser.add_argument('--once', '-o', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤—ã–π—Ç–∏')
    parser.add_argument('--interval', '-i', type=int, default=1, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--check', '-c', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    if args.once:
        status = get_ollama_status()
        print(json.dumps(status, indent=2, ensure_ascii=False))
    elif args.check:
        check_active_requests()
    else:
        monitor_loop(args.interval)

if __name__ == "__main__":
    main()